# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By //Copperforge
# This file is distributed under the same license as the Game Manual 0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Shawphy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 04:15+0000\n"
"PO-Revision-Date: 2022-08-16 05:18+0000\n"
"Last-Translator: Shawphy, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/gamemanual0/teams/148648/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:4
msgid "Common Issues"
msgstr "常见问题"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:6
msgid ""
"Be careful what code you take as a reference from this page! Some of it is "
"intentionally buggy to demonstrate potential easy-to-make errors."
msgstr "请小心参考本页中的代码！其中有些代码是故意写错的，以展示潜在的易错点。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:9
msgid "Exceptions"
msgstr "异常处理"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:11
msgid ""
"Exceptions are events that occur during the execution of a program, "
"disrupting the normal flow of instructions, used in error events or problems"
" that arise during runtime. A exception can be catched to avoid propagation,"
" otherwise any exception that's not handled will cause the program flow to "
"stop immediately."
msgstr ""
"异常是在程序执行过程中发生的事件，会扰乱正常的指令流程，用于错误事件或运行时出现的问题。异常可以被捕获以避免传播，否则任何未处理的异常都会导致程序流程立即停止。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:13
msgid "Some common types of exceptions include:"
msgstr "常见的异常情况包括"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:15
msgid "**NullPointerException**"
msgstr "**无效指针异常**"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:17
msgid ""
"It occurs when trying to call a method or getting a property of an object "
"from a variable with a *null* value, which basically means that the variable"
" doesn't hold a value *yet*, or the value doesn't exist."
msgstr "当试图调用一个方法或从一个 *空值* 的变量获取一个对象的属性时，就会出现这种情况，这基本上意味着该变量* 还没有* 值，或者该值不存在。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:18
msgid ""
"This exception is one of the most common in FTC\\ |reg|, below is an example"
" that throws a NullPointerException:"
msgstr "该异常是 FTC\\ |reg| 中最常见的异常之一，下面是一个抛出 NullPointerException 的示例："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:44
msgid ""
"This can be fixed moving the \"Servo\" variable value definition to the init"
" (or ``runOpMode()`` in LinearOpModes) method as follows:"
msgstr "可以将 \"Servo\"变量值定义移至 init（或 LinearOpModes 中的 `runOpMode()`）方法，如下所示："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:72
msgid "**TargetPositionNotSetException**"
msgstr "**目标位置未设置异常**"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:74
msgid ""
"This exception type is a custom one from the SDK. It means you changed the "
"motor ``RunMode`` to RUN_TO_POSITION before setting a target position:"
msgstr "这种异常类型是 SDK 自定义的。这意味着您在设置目标位置前将电机的 ``RunMode`` 更改为 RUN_TO_POSITION："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:84
msgid ""
"It is fixed by simply switching the order of the statements; setting target "
"position first, then changing the ``RunMode``:"
msgstr "要解决这个问题，只需转换语句的顺序；先设置目标位置，然后更改 ``RunMode`` 即可："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:94
msgid "**ArithmeticException**"
msgstr "**算术异常**"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:96
msgid ""
"Occurs when performing any illegal arithmetic operations such as dividing by"
" zero:"
msgstr "在执行任何非法算术运算（如除以零）时出现："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:102
msgid ""
"It can be handled by enclosing the code likely to throw this type of "
"exception with a `try catch block "
"<https://www.w3schools.com/java/java_try_catch.asp>`_:"
msgstr ""
"处理方法是用一个 `try catch 代码块 "
"<https://www.w3schools.com/java/java_try_catch.asp>`_ ，将可能抛出此类异常的代码包围起来："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:116
msgid "**InterruptedException**"
msgstr "**中断异常**"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:118
msgid ""
"It means that the SDK requested the OpMode to stop, and it's considered part"
" of normal operation. An interrupt means that the current thread has been "
"requested to end, so don't panic when you see a spam of those in "
":ref:`logcat <logcat>`!"
msgstr ""
"这意味着 SDK 要求操作模式停止，并将其视为正常操作的一部分。中断意味着当前线程已被请求结束，所以当你在 :ref:`logcat <logcat>`"
" 中看到大量中断时不要惊慌！"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:120
msgid ""
"If you call a method that possibly throws an InterruptedException (such as "
"``Thread.sleep()``) it should be handled like this, with the try catch "
"syntax mentioned before:"
msgstr "如果调用可能抛出中断异常的方法（如 ``Thread.sleep()``），则应使用前面提到的 try catch 语法进行类似处理："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:133
msgid ""
"Note that LinearOpMode already contains a shorthand `sleep() "
"<https://github.com/OpenFTC/Extracted-"
"RC/blob/f47d6f15fa1b59faaf509a522e0ec04f223ec125/RobotCore/src/main/java/com/qualcomm/robotcore/eventloop/opmode/LinearOpMode.java#L96>`_"
" method that does this under the hood. (And you shouldn't be using sleeps in"
" OpMode since they're more strictly controlled. Read next sections for "
"further information)"
msgstr ""
"请注意，LinearOpMode 已经包含了一个速记的 `sleep() <https://github.com/OpenFTC/Extracted-"
"RC/blob/f47d6f15fa1b59faaf509a522e0ec04f223ec125/RobotCore/src/main/java/com/qualcomm/robotcore/eventloop/opmode/LinearOpMode.java#L96>`_"
" 方法，本质上就是调用了 ``Thread.sleep()``。(你不应该在 OpMode 中使用 sleep() "
"，因为它们受到更严格的控制。更多信息请阅读后续章节）"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:136
msgid "How the SDK handles exceptions"
msgstr "SDK 如何处理异常"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:138
msgid ""
"Except for InterruptedExceptions and some other internal special cases, "
"which simply cause the OpMode to end, the FTC SDK performs an \"emergency "
"stop\" routine when an exception is thrown and not handled properly. This "
"halts the OpMode and displays the full stacktrace on screen. The stacktrace "
"can also be viewed through :ref:`logcat` when using Android Studio."
msgstr ""
"除了中断异常和其他一些内部特殊情况（这些情况只会导致运行模式结束）外，FTC SDK 会在异常抛出且处理不当时执行 \"紧急停止 "
"\"例程。这会停止运行模式，并在屏幕上显示完整的堆栈跟踪。使用 Android Studio 时，也可通过 :ref:`logcat` 查看堆栈跟踪。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:140
msgid ""
"Before SDK 8.0, only the first line of the error would be displayed and "
"selecting \"Restart Robot\" from the menu would be required before running "
"an OpMode again."
msgstr "在 SDK 8.0 之前，只会显示错误的第一行，并且需要从菜单中选择 \"重新启动机器人 \"才能再次运行 OpMode。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:142
msgid ""
"It's generally a good idea to debug all OpModes extensively before any "
"official match, as these exceptions are disruptive."
msgstr "一般来说，在正式比赛前最好对所有操作模式进行全面调试，因为这些异常会造成干扰。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:147
msgid "Stuck in start, loop, stop..."
msgstr "卡在启动、循环、停止..."

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:149
msgid ""
"OpModes are *strictly controlled programs*, in the sense that the SDK "
"requires them to flow in a certain way with the methods ``init()``, "
"``loop()``, etc. If you take more than a specific time (`5 seconds, or 900 "
"milliseconds in stop commands <https://github.com/OpenFTC/Extracted-"
"RC/blob/f47d6f15fa1b59faaf509a522e0ec04f223ec125/RobotCore/src/main/java/com/qualcomm/robotcore/eventloop/opmode/OpMode.java#L189>`_)"
" executing an action in any of these methods, the SDK will perform the "
"\"emergency stop\" routine explained before, with the \"stuck in "
"``action``\" error message."
msgstr ""
"OpModes是 *严格控制的程序* ，SDK要求它们以一定的方式与 ``init()`` 、 ``loop()`` "
"等方法一起运行。如果您执行这些方法中的任何一个操作的时间超过了特定的时间（`5 秒，或停止命令中的 900 毫秒 "
"<https://github.com/OpenFTC/Extracted-"
"RC/blob/f47d6f15fa1b59faaf509a522e0ec04f223ec125/RobotCore/src/main/java/com/qualcomm/robotcore/eventloop/opmode/OpMode.java#L189>`_"
" ），SDK 就会执行之前解释过的 \"紧急停止 \"例程，并显示 \"卡在`操作`中`\"的错误信息。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:170
msgid ""
"If you need to run any sort of lenghty action in your OpMode, another option"
" would be using a LinearOpMode instead."
msgstr "如果需要在 OpMode 中运行任何较长的操作，另一种方法是使用 LinearOpMode。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:172
msgid ""
"LinearOpModes are less strict since their single ``runOpMode()`` method can "
"flow more freely, but they still need to be cooperative to stop requests. "
"Take the following code as an example:"
msgstr ""
"LinearOpModes 没有那么严格，因为它们的单一 ``runOpMode()`` "
"方法可以更自由地流动，但它们仍然需要写点代码来配合停止请求。以下面的代码为例："

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:190
msgid ""
"This code isn't cooperative to stop requests, since the ``while`` loop "
"doesn't have an exit condition to cooperate with the OpMode stopping, "
"therefore, this code will cause a \"stuck in stop\" error once it's stopped "
"in the Driver Station."
msgstr "由于 ``while`` 循环没有退出条件来配合操作模式的停止，因此，一旦在驱动站中停止，这段代码就会导致 \"卡在停止中 \"的错误。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:192
msgid ""
"To cooperate with the stopping of the OpMode, an ``opModeIsActive()`` or "
"``!isStopRequested()`` condition is required to be added to all the blocking"
" loops executed in the ``runOpMode()`` method. Consult the :doc:`linear-"
"opmode-vs-opmode` page for more information about these methods."
msgstr ""
"为了配合 OpMode 的停止，需要在 ``runOpMode()`` 方法中执行的所有阻塞循环中添加 ``opModeIsActive()`` 或 "
"``!isStopRequested()`` 条件。有关这些方法的更多信息，请参阅 :doc:`linear-opmode-vs-opmode` 页面。"

#: ../../gm0/source/docs/software/getting-started/common-issues.rst:194
msgid "An example for a cooperative LinearOpMode would be as follows:"
msgstr "配合停止请求的 LinearOpMode 的示例如下："

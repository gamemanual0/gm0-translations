# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By //Copperforge
# This file is distributed under the same license as the Game Manual 0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# DomnickJYH, 2023
# Shawphy, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-14 16:16+0000\n"
"PO-Revision-Date: 2022-08-16 05:18+0000\n"
"Last-Translator: Shawphy, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/gamemanual0/teams/148648/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:4
msgid "Mecanum TeleOp"
msgstr "麦克纳姆 TeleOp"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:7
msgid "Mecanum Physics"
msgstr "麦克纳姆物理学"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:9
msgid ""
":term:`Mecanum drive <Mecanum Wheel>` is a very popular drivetrain type in "
"FTC\\ |reg|. Mecanum drivetrains enables holonomic movement. This means that"
" the drivetrain is able to move in any direction while rotating: forwards, "
"backwards, side to side, translating while rotating, etc. `Here is a neat "
"video <https://www.youtube.com/watch?v=pP8ajNMx84k>`_ demonstrating such "
"movement."
msgstr ""
":term:`麦克纳姆驱动 <Mecanum Wheel>` （以下简称麦轮）是FTC\\ |reg| "
"中非常流行的驱动系统类型。麦轮传动系统支持完整运动。这意味着传动系统在旋转时能够向任何方向移动：向前、向后、左右、旋转时平移等。 `这里有一个简洁的视频"
" <https://www.youtube.com/watch?v=pP8ajNMx84k>`_ 演示了这种运动。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:11
msgid ""
"Some common COTS mecanum drivetrain kits are the `goBILDA Strafer Chassis "
"Kit <https://www.gobilda.com/strafer-chassis-kit-v5/>`_ and the `REV Mecanum"
" Drivetrain Kit <https://www.revrobotics.com/rev-45-2470/>`_."
msgstr ""
"一些常见的COTS麦轮传动系统套件是 `goBILDA Strafer Chassis Kit "
"<https://www.gobilda.com/strafer-chassis-kit-v5/>`_ 和 `REV Mecanum "
"Drivetrain Kit <https://www.revrobotics.com/rev-45-2470/>`_。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:13
msgid ""
":term:`Mecanum wheels <Mecanum Wheel>` have rollers at a 45\\ |deg| angle to"
" the rest of the wheel. Since these are in contact with the ground instead "
"of something solid like in a :term:`traction wheel <Traction wheel>`, "
"instead of the wheel creating a force parallel to the orientation of the "
"wheel, it creates one 45\\ |deg| from parallel. Depending on how the wheels "
"are driven, X or Y components of the force vectors can cancel which allows "
"movement in any direction."
msgstr ""
":term:`麦轮 <Mecanum Wheel>` 滚轮与轮子的其他部分成 45 度角。由于这些滚轮与地面接触，而不是像 :term:`牵引轮 "
"<Traction wheel>` 那样与固体接触，因此车轮产生的力不是与车轮方向平行的力，而是与平行线成 45\\ |deg| "
"角的力。根据车轮的驱动方式，力矢量的X或Y分量可以抵消，从而允许向任何方向运动。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rstNone
msgid "Force diagram of a single mecanum wheel"
msgstr "单个麦轮的受力示意图"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:19
msgid "Using Vectoring to Create Omnidirectional Movement"
msgstr "使用矢量创建全方位运动"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:21
msgid ""
"A standard mecanum drive configuration possesses 4 mecanum wheels oriented "
"in an \"X\" shape. This means that the rollers are angled towards the center"
" when looking at it from above. This configuration allows one to add up the "
"force vectors generated by the offset rollers and derive movement in any "
"direction. It is important to note that because of friction, perfect "
"movement isn't possible in every direction, so a :term:`mecanum drivetrain "
"<Mecanum Wheel>` will be able to drive slightly faster forwards/backwards "
"than any other directions. Combining translation and rotation will also "
"result in slower movement."
msgstr ""
"标准的麦轮驱动配置有4个以“X”形状定向的麦轮。这意味着当从上面看时，滚子是朝向中心的。这种配置允许人们将偏移滚子产生的力矢量相加，并推导出任何方向的运动。重要的是要注意，由于摩擦力，不可能在每个方向都进行完美的运动，因此"
" :term:`麦轮底盘 <Mecanum Wheel>` 比起其他方向可以更快地向前/向后移动。平移和旋转相结合也会导致运动变慢。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rstNone
msgid "Force diagram of a complete mecanum drive"
msgstr "完整麦轮传动装置的受力示意图"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:26
msgid ""
"In the image above, vectors 1, 2, 3, and 4 are the force vectors created by "
"the :term:`mecanum wheels <Mecanum Wheel>` when the chassis is instructed to"
" drive towards the top of the image. All motors are driving forward. The "
"blue and red lines are their X and Y components, respectively. Here are a "
"few examples of how the wheels must be driven to achieve different "
"movements:"
msgstr ""
"在上图中，向量1、2、3和4分别表示底盘向图像顶部行驶时由 :term:`麦轮 <Mecanum Wheel>` "
"创建的力向量。所有电机都在向前行驶。蓝线和红线分别是它们的X和Y分量。以下是车轮必须如何驱动以实现不同运动的几个示例："

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rstNone
msgid ""
"Examples of ways to move the wheels on mecanum drive to move the robot in "
"different directions"
msgstr "麦轮传动装置使机器人向不同方向移动的方法示例"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:32
msgid ""
"It is strongly advised to not hardcode these movements in; there is a much "
"better way described below that allows for true holonomic movement and is "
"much more elegant."
msgstr "强烈建议不要硬编码这些动作；下面描述了一种更好的方法，可以实现真正的完整运动，而且更加优雅。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:35
msgid "Deriving Mecanum Control Equations"
msgstr "推导麦卡纳姆轮控制方程"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:37
msgid ""
"Before thinking about mecanum, envision a scenario where you have a 2 motor "
"tank drivetrain which you want to control using the left stick Y axis for "
"forward/backward movement, and the right stick X axis for pivot turning. The"
" motors are configured so that positive is clockwise for the right motor "
"when the body is facing away from you, and the left motor is the opposite. "
"To control only forward/backward movement, you simply need to set the motor "
"powers to the Y stick value (flip the sign since Y is reversed):"
msgstr ""
"在推导麦轮方程之前，设想一个场景，你有一个2电机坦克底盘，你想用左摇杆Y轴来控制它前进/后退，用右摇杆X轴来控制它自转转动。电机的配置是，当底盘背对着你时，右电机的正方向是顺时针，而左电机相反。要控制只前进/后退运动，你只需要将电机功率设置为Y摇杆值（翻转符号，因为Y是反转的）："

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
msgid "Java"
msgstr "Java"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:0
msgid "Blocks"
msgstr "图形化编程"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:59
msgid ""
"Although at first adding rotation might seem like a difficult task, it's "
"actually super simple. All you need to do is subtract the right X stick "
"value from the right wheels, and add it to the left:"
msgstr "虽然起初添加旋转似乎是一项艰巨的任务，但实际上非常简单。你需要做的就是从右轮功率值中减去右摇杆的X值，然后将其添加到左轮功率值中："

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:81
msgid ""
"Here, if the left stick is pressed upwards, both of the motors will be fed a"
" positive value, causing the robot to move forward. If it is pressed "
"downwards, both of the motors will be fed a negative value, causing the "
"robot to move backwards. A similar principle applies for rotation: if the "
"right stick is pushed rightward, the left wheels will spin forward while the"
" right spin backward, causing rotation. The opposite applies for pushing the"
" stick left. If both sticks are pushed at the same time, say the left Y "
"stick is at 1 and the right X stick is also at 1, the value of the left "
"wheels will be :math:`1+1=2` (which gets clipped to 1 in the SDK) and the "
"right wheels will be :math:`1-1=0`, which causes a rightward curve."
msgstr ""
"在这里，如果向前按压左摇杆，两个电机都会被馈送一个正值，导致机器人向前移动。如果向后按压，两个电机都会被馈送一个负值，导致机器人向后移动。类似的原理也适用于旋转：如果向右推右摇杆，左车轮会向前旋转，而右车轮向后旋转，导致旋转。相反的情况适用于向左推摇杆。如果两个摇杆同时被推，假设左Y摇杆在1，右X摇杆也在1，左车轮的值将是"
" :math:`1+1=2` （在SDK中被裁剪成1），右车轮将是 :math:`1-1=0` ，这会导致向右转向。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:83
msgid ""
"Applying omnidirectional movement with :term:`mecanum wheels <Mecanum "
"Wheel>` operates under the same principle as adding turning into the tank "
"example. The left stick X values will be added or subtracted to each wheel "
"depending on how that wheel needs to rotate to get the desired movement. The"
" only difference from turning is that rather than wheels on the same side "
"being the same sign, wheels diagonal to each other will be the same sign."
msgstr ""
"使用 :term:`麦轮 <Mecanum Wheel>` "
"进行全向运动的原理与将转弯添加到坦克示例中的原理相同。根据车轮需要如何旋转以获得所需的运动，左摇杆的X值将被加减到每个车轮上。与转弯的唯一区别是，不是同一侧的车轮是相同的符号，而彼此对角线的车轮将是相同的符号。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:85
msgid ""
"We want a positive left stick X value to correlate to rightward strafing. If"
" we refer back to the vectoring image, this means that the front left and "
"back right need to rotate forward, while the back left and front right need "
"to rotate backwards. So, we should add the x value to the front left and "
"back right and subtract it from the back right and front left:"
msgstr ""
"我们想要一个正的左摇杆X值与向右平移相关联。如果我们参考矢量图像，这意味着前左和后右需要向前旋转，而后左和前右需要向后旋转。因此，我们应该将X值添加到前左和后右，并从后右和前左减去它："

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:111
msgid ""
"Most FTC motors spin counterclockwise when viewed from their face when given"
" positive power by default, with the exception of NeveRests. If your "
"drivetrain uses an even number of gears, this will reverse the direction the"
" motors spin in."
msgstr ""
"大多数FTC电机在默认情况下正功率时从它们的表面看是逆时针旋转的，但NeveRest除外。如果你的传动系统使用偶数个齿轮，这将逆转电机旋转的方向。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:113
msgid ""
"On most drivetrains, you will need to reverse the left side for positive "
"power to move forwards with most motors, and reverse the right side with "
"NeveRests. The presence of gearing between the motor gearbox and the wheel "
"may swap this, which is the case for the goBILDA Strafer and the REV Mecanum"
" Drivetrain Kit."
msgstr ""
"在大多数传动系统上，您需要反转左侧以获得正功率才能与大多数电机一起前进，并使用NeveRest反转右侧。电机变速箱和车轮之间的齿轮传动可能会交换这一点，goBILDA"
" Strafer和REV Mecanum Drivetrain Kit就是这种情况。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:115
msgid ""
"This is the same as the tank example, except now with 4 motors and the "
"strafing component added. Similarly to the tank example, the Y component is "
"added to all wheels, and the right X (rx) is added to the left wheels and "
"subtracted from the right. Now, we have added a left X component (x) that "
"allows us to strafe rightward. In doing that, however, we have actually "
"allowed for strafing in any direction. If you think about it, pressing the "
"left joystick to the left will do the same thing in reverse, which is what "
"is needed to strafe left. If it is pressed at 45 degrees, the x and y "
"components of the joystick will be equal. This will cause two diagonal "
"motors to cancel, allowing for diagonal movement. This same effect applies "
"to every angle of the joystick."
msgstr ""
"这与坦克底盘示例相同，只是现在添加了4个电机和平移组件。与坦克示例类似，Y分量被添加到所有车轮上，右侧X "
"(rx)被添加到左侧车轮上并从右侧减去。现在，我们添加了一个左侧X分量(x)，允许我们向右平移。然而，在这样做的过程中，我们实际上允许向任何方向平移。如果你想想看，向左按压左侧操纵杆会反向做同样的事情，这就是向左平移所需要的。如果以45度按压，操纵杆的x和y分量将相等。这将导致两个对角线电机取消，允许对角线移动。同样的效果适用于操纵杆的每个角度。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:117
msgid ""
"Now that we have a functioning mecanum driving program, there are a few "
"things that can be done to clean it up. The first of these would be "
"multiplying the left X value by something to counteract imperfect strafing. "
"Doing this will make the drive feel more accurate on non axis aligned "
"directions, and make field centric driving more accurate. In this tutorial, "
"we will use 1.1, but it's really up to driver preference."
msgstr ""
"现在我们有了一个正常运行的麦轮驱动程序，可以做一些事情来清理它。第一步是将左X值乘以某个值以抵消不完美的平移。这样做将使驱动器在非轴对齐方向上感觉更准确，并使以场为中心的驱动更准确。在本教程中，我们将使用1.1，但这实际上取决于驾驶偏好。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:136
msgid ""
"The other improvement we can make is scale the values into the range of -1 "
"to 1."
msgstr "我们可以做的另一个改进是将值缩放到-1到1的范围内。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:138
msgid ""
"Since the SDK simply clips (limits) the powers to that range, we can lose "
"the ratio we are looking for unless we proactively put all the numbers back "
"in that range while still maintaining our calculated ratio. For example, if "
"we calculate values of 0.4, 0.1, 1.1, and 1.4, they will be clipped to 0.4, "
"0.1, 1.0, and 1.0, which is not the same ratio. Instead, we need to divide "
"all of them by the largest power's absolute value when it exceeds 1:"
msgstr ""
"由于 SDK "
"只是会简单地将功率值剪切（限制）到该范围内，因此除非我们主动将所有数字放回该范围内，同时保持计算出的比率，否则就会导致丢失各个轮子功率值的比例关系。例如，如果我们计算出"
" 0.4、0.1、1.1 和 1.4 的值，它们将被剪切为 0.4、0.1、1.0 和 1.0，这不是相同的比率。因此，当最大功率值的绝对值超过 1 "
"时，我们需要将它们全部除以最大功率值的绝对值："

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:163
msgid ""
"Make sure to set the powers on your motor and update this every loop in an "
"opmode!"
msgstr "确保在电机上设置功率，并在 opmode 模式的每个循环中更新功率！"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:166
msgid "Robot-Centric Final Sample Code"
msgstr "以机器人视角操控模式的最终示例代码"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:231
msgid ":download:`Blocks file download <block-code/mecanum-drive-sample.blk>`"
msgstr ""
":download:`Blocks file download <block-code/mecanum-drive-sample.blk>`"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:237
msgid "Field Centric"
msgstr "以场地坐标系的操控模式"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:239
msgid ""
"With field centric mecanum drive, the translation joystick controls the "
"direction of the robot relative to the field, as opposed to the robot frame."
" This is preferred by some drivers, and make some evasive action easier, as "
"one can spin while translating in a given direction easier. To do this, the "
"x/y components of the joysticks are rotated counter to the robot's angle, "
"which is given by the IMU."
msgstr ""
"在以场地坐标系的麦轮驱动模式中，平移操纵杆控制的是机器人相对于场地的方向，而不是机器人自身参考系的方向。有些驾驶员更喜欢这种操作模式，这样可以使一些规避动作变得更容易，因为在向指定方向平移的同时可以更容易地旋转。为此，操纵杆的"
" x/y 分量会基于机器人的角度进行旋转，这里机器人的角度由 IMU 提供。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:241
msgid ""
"There is an IMU inside of Control Hubs (and older models of Expansion Hubs)."
" Unlike most other hardware, it is recommended to do more than "
"``hardwareMap.get()`` to begin using it. Note, this is configured when "
"creating a new configuration by default as ``imu``. See the `FTC doc page "
"covering the IMU interface and its parameters <https://ftc-"
"docs.firstinspires.org/programming_resources/imu/imu.html>`_ for more "
"information. The way the IMU will be initialized here is:"
msgstr ""
"Control Hubs（以及旧型号的Expansion Hub）内部有一个IMU。与大多数其他硬件不同，建议使用 "
"``hardwareMap.get()`` 之外的操作来开始使用它。请注意，默认情况下，这是在创建新配置时配置为 ``imu`` 的。有关详细信息，请 "
"`参阅FTC文档页面，其中涵盖了IMU接口及其参数 <https://ftc-"
"docs.firstinspires.org/programming_resources/imu/imu.html>`_ 。此处初始化IMU的方式是："

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:254
msgid ""
"The angle needs to be read every loop. In addition to this, while the IMU "
"keeps a consistent zero position between OpModes (relevantly, including "
"between autonomous and teleop), adding a bind to reset the angle is "
"important to counteract drift and because the zero can change due to some "
"types of disconnects."
msgstr ""
"每个循环都需要读取角度。除此之外，虽然IMU在OpModes之间保持一致的零位置（相关地，包括自主操作和远程操作之间），但添加绑定以重置角度对于抵消平移很重要，因为零可能会因某些类型的断开而改变。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:256
msgid ""
"``BNO055`` objects will reset the IMU zero when ``initialize`` is called. "
"The ``BNO055`` class is not recommended for new development. The ``IMU`` "
"class does not have this behavior, and is the appropriate replacement as of "
"SDK v8.1."
msgstr ""
"``BNO055`` 对象将在调用 ``initialize`` 时重置IMU零。 ``BNO055`` 类不推荐用于新开发。 ``IMU`` "
"类没有此行为，并且是SDKv8.1的适当替换。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:269
msgid ""
"Then, the translation joystick values need to be counterrotated by the robot"
" heading. The IMU returns heading, however we need to rotate the movement "
"counter to the robot's rotation, so its negative is taken. The joystick "
"values are a vector, and rotating a vector in 2D requires this formula "
"(`proved here <https://matthew-"
"brett.github.io/teaching/rotation_2d.html>`_), where :math:`x_1` and "
":math:`y_1` are the components of the original vector, :math:`\\beta` is the"
" angle to rotate by, and :math:`x_2` and :math:`y_2` are the components of "
"the resultant vector."
msgstr ""
"然后，平移操纵杆值需要被机器人航向反旋转。IMU返回航向，但是我们需要旋转与机器人旋转相反的运动，所以它的负数被取。操纵杆值是一个向量，在2D中旋转一个向量需要这个公式（"
" `在这里证明了 <https://matthew-brett.github.io/teaching/rotation_2d.html>`_ ），其中 "
":math:`x_1` 和 :math:`y_1` 是原始向量的分量， :math:`\\beta` 是旋转的角度， :math:`x_2` 和 "
":math:`y_2` 是合成向量的分量。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:271
msgid ""
"x_2=x_1cos \\beta - y_1sin \\beta \\\\\n"
"y_2=x_1sin \\beta + y_1cos \\beta"
msgstr ""
"x_2=x_1cos \\beta - y_1sin \\beta \\\\\n"
"y_2=x_1sin \\beta + y_1cos \\beta"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:282
msgid ""
"Then, these rotated values can be put into the mecanum kinematics shown "
"earlier."
msgstr "然后，这些旋转的值可以放入前面显示的麦轮运动学中。"

#: ../../gm0/source/docs/software/tutorials/mecanum-drive.rst:293
msgid "Field-Centric Final Sample Code"
msgstr "以场地为主体的最终示例代码"

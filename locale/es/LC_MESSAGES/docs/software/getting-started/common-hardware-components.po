# SOME DESCRIPTIVE TITLE.
# Copyright (C) Game Manual 0 Contributors |  Hosting Graciously Provided By //Copperforge
# This file is distributed under the same license as the Game Manual 0 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Ddino XD, 2023
# Victoria Chacon, 2024
# Yaretzi Lugo, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Game Manual 0 0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-02 04:16+0000\n"
"PO-Revision-Date: 2022-08-16 05:18+0000\n"
"Last-Translator: Yaretzi Lugo, 2024\n"
"Language-Team: Spanish (Mexico) (https://app.transifex.com/gamemanual0/teams/148648/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:4
msgid "Reading and Writing to Hardware"
msgstr "Lectura y Escritura al Hardware"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:6
msgid ""
"When using the FTC\\ |reg| SDK, there are a variety of built in hardware "
"classes which can be used to communicate with hardware on the robot such as "
"DC Motors, :term:`Servos <Servo>`, and Sensors."
msgstr ""
"Cuando se utiliza el SDK de FTC |reg|, hay una variedad de clases de "
"hardware incorporados que se pueden utilizar para comunicarse con el "
"hardware del robot, tales como motores de corriente continua, :term:`servos "
"<Servo>`, y sensores."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:9
msgid "Creating and Instantiating Hardware Objects"
msgstr "Creación e Instanciación de Objetos Hardware"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:11
msgid ""
"The first thing required to properly create an object is to import its "
"class. In Android Studio, if the class is referenced without being imported "
"Alt+Enter can be pressed to automatically import it. After it is imported, "
"the next step is to create the object::"
msgstr ""
"Lo primero que se necesita para crear correctamente un objeto es importar su"
" clase. En Android Studio, si se hace referencia a la clase sin haberla "
"importado se puede pulsar Alt+Enter para importarla automáticamente. Una vez"
" importada, el siguiente paso es crear el objeto:"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:15
msgid ""
"After the object is created, it must be instantiated. Part of the ``OpMode``"
" superclass is something called ``hardwareMap``. ``hardwareMap`` is used in "
"the FTC SDK to instantiate objects rather than calling a constructor."
msgstr ""
"Después de crear el objeto, hay que instanciarlo. Parte de la superclase "
"``OpMode`` es algo llamado ``hardwareMap``. ``hardwareMap`` se utiliza en el"
" FTC SDK para instanciar objetos en lugar de llamar a un constructor."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:17
msgid ""
"It contains all of the information entered into the configuration on the "
"Robot Controller, such as names of hardware and what port it is plugged "
"into. Here is an example of instantiating the motor we created above::"
msgstr ""
"Contiene toda la información introducida en la configuración del Robot "
"Controller, como los nombres del hardware y en qué puerto está conectado. He"
" aquí un ejemplo de instanciación del motor que hemos creado anteriormente::"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:21
msgid ""
"Whatever sensor you are using, you will pass that class into the spot where "
"``DcMotor.class`` is. For example, if liftMotor was a Servo, ``Servo.class``"
" would be passed instead."
msgstr ""
"Sea cual sea el sensor que estés utilizando, pasarás esa clase al lugar "
"donde está ``DcMotor.class``. Por ejemplo, si el liftMotor fuera un Servo, "
"se pasaría ``Servo.class`` en su lugar."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:23
msgid ""
"For the second argument, you pass whatever the device is named in the Robot "
"Controller configuration. ``hardwareMap`` will then go find what port the "
"device with that name is plugged into, which allows the hardware to be "
"accessed."
msgstr ""
"Para el segundo argumento, pasas el nombre que tenga el dispositivo en la "
"configuración del Robot Controller. Entonces ``hardwareMap`` irá a buscar en"
" qué puerto está conectado el dispositivo con ese nombre, lo que permite "
"acceder al hardware."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:26
msgid "Examples of Using Common Hardware Components"
msgstr "Ejemplos de Uso de Componentes Comunes de Hardware "

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:29
msgid "DC Motor"
msgstr "DC Motor"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:39
msgid ""
"After a ``DcMotor`` is instantiated, there are a few variables you can set "
"to affect how the DC Motor runs. The first of these is direction::"
msgstr ""
"Después de instanciar un ``DcMotor``, hay algunas variables que puede "
"establecer para afectar a cómo funciona el motor DC. La primera de ellas es "
"la dirección::"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:44
msgid ""
"Changing the direction of the motor does exactly what should be expected, it"
" changes the direction. If a power of 1 is applied to the motor while it is "
"in forward mode, it will turn one direction. If it is in reverse, a power of"
" 1 will spin it in the other direction. If you face the shaft of the motor "
"towards you, forward is counterclockwise (with the exception of NeveRest "
"motors)."
msgstr ""
"Cambiar la dirección del motor hace exactamente lo que debería esperarse, "
"cambia la dirección. Si se aplica una potencia de 1 al motor mientras está "
"en modo de avance, girará en una dirección. Si está en marcha atrás, una "
"potencia de 1 lo hará girar en el otro sentido. Si miras el eje del motor "
"hacia ti, hacia adelante es en el sentido contrario a las agujas del reloj "
"(con la excepción de los motores NeveRest)."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:46
msgid "Next, there are two zero power behaviors that can be adjusted::"
msgstr ""
"A continuación, hay dos comportamientos de potencia cero que se pueden "
"ajustar::"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:51
msgid ""
"Changing this variable affects how the DC Motor behaves while a power of 0 "
"is applied. ``BRAKE`` will cause the motor to try and slow itself down if it"
" is moving (it will NOT cause the motor to hold its position if not already "
"moving), while ``FLOAT`` causes the motor to glide to a stop, letting "
"friction do all the work."
msgstr ""
"Cambiar esta variable afecta a cómo se comporta el Motor DC mientras se "
"aplica una potencia de 0. ``BRAKE`` hará que el motor intente frenarse a sí "
"mismo si se está moviendo (NO hará que el motor mantenga su posición si no "
"se está moviendo), mientras que ``FLOAT`` hace que el motor se deslice hasta"
" detenerse, dejando que la fricción haga todo el trabajo."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:53
msgid ""
"Finally, there are four different run modes that can be used with DC motors:"
" ::"
msgstr ""
"Por último, existen cuatro modos de funcionamiento diferentes que pueden "
"utilizarse con DC Motors:"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:61
msgid ""
"It is important to note that encoder values can be read in any of these "
"modes provided an encoder is properly plugged in. These modes just change "
"how the motor reacts to these encoder values. `The REV Robotics "
"documentation has an explanation of all four run modes "
"<https://docs.revrobotics.com/duo-control/programming/using-encoder-"
"feedback#choosing-a-motor-mode>`_."
msgstr ""
"Es importante tener en cuenta que los valores del encoder se pueden leer en "
"cualquiera de estos modos siempre que el encoder esté correctamente "
"conectado. Estos modos sólo cambian la forma en que el motor reacciona a "
"estos valores del codificador. `La documentación de REV Robotics tiene una "
"explicación de los cuatro modos de ejecución "
"<https://docs.revrobotics.com/duo-control/programming/using-encoder-"
"feedback#choosing-a-motor-mode>`_."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:63
msgid ""
"``RUN_TO_POSITION`` can be a convenient way to control a single-motor "
"mechanism, as it offloads all control work; however, since every motor is "
"dealt with independently, it is inadvisable to use this on mechanisms with "
"multiple motors, especially drivetrains."
msgstr ""
"``RUN_TO_POSITION`` puede ser una forma conveniente de controlar un "
"mecanismo de un solo motor, ya que descarga todo el trabajo de control; sin "
"embargo, dado que cada motor se trata de forma independiente, no es "
"aconsejable utilizarlo en mecanismos con múltiples motores, especialmente en"
" un chasis."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:66
msgid "Encoders"
msgstr "Encoders"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:68
msgid "Term"
msgstr "Término"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:71
msgid "Encoder"
msgstr "Encoder"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:73
msgid ""
"An encoder refers to a device that tracks (generally) rotational movement "
"around an axis."
msgstr ""
"Un encoder es un dispositivo que sigue (generalmente) el movimiento de "
"rotación alrededor de un eje."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:75
msgid ""
"There are both absolute and relative encoders. An absolute encoder will "
"report at exactly what angle the shaft is compared to its absolute \"zero\"."
" A relative encoder will report how far the :term:`shaft <Shaft>` has "
"rotated since it started tracking (for example, when autonomous starts). "
"Relative encoders will have a quadrature output, whereas absolute encoders "
"generally have analog or i2c outputs."
msgstr ""
"Existen encoders absolutos y relativos. Un encoder absoluto informará "
"exactamente del ángulo en el que se encuentra el eje en comparación con su "
"\"cero\" absoluto. Un encoder relativo informará de cuánto ha girado el "
":término: `eje <Shaft>` desde que comenzó el seguimiento (por ejemplo, "
"cuando se inicia el autónomo). Los encoder relativos tendrán una salida en "
"cuadratura, mientras que los encoders absolutos suelen tener salidas "
"analógicas o i2c."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:77
msgid ""
"Encoders are used to help find the position of where the robot, or one of "
"its mechanisms, is."
msgstr ""
"Los encoders se utilizan para ayudar a encontrar la posición en la que se "
"encuentra el robot, o uno de sus mecanismos."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:79
msgid ""
"While all FTC legal motors contain built in relative quadrature encoders, "
"they must be wired separately and are not required for use. External "
"encoders may be used and plugged into an encoder port so long as they use "
"the quadrature communication protocol."
msgstr ""
"Aunque todos los motores legales FTC contienen codificadores de cuadratura "
"relativa incorporados, deben cablearse por separado y no son necesarios para"
" su uso. Se pueden utilizar encoders externos y conectarlos a un puerto de "
"encoder siempre que utilicen el protocolo de comunicación de cuadratura."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:81
msgid ""
"Accessing encoders requires calling one method on the DcMotor object, "
"``getCurrentPosition()``, which returns the current position of the encoder "
"plugged into the port. This number may be arbitrary at the beginning of an "
"opmode, and is not reset to 0 unless ``STOP_AND_RESET_ENCODERS`` is used or "
"power is cycled to the expansion hub."
msgstr ""
"Para acceder a los encoders es necesario llamar a un método del objeto "
"DcMotor, ``getCurrentPosition()``, que devuelve la posición actual del "
"encoder conectado al puerto. Este número puede ser arbitrario al principio "
"de un opmode, y no se reinicia a 0 a menos que se use "
"``STOP_AND_RESET_ENCODERS`` o se desconecte y vuelva la alimentación al "
"expansion hub."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:83
msgid ""
"There is no real standardized terminology when dealing with quadrature "
"encoders. The SDK uses \"CPR\" or Counts Per Revolution by default,. You may"
" also see some datasheets list \"PPR\" or Pulses per Revolution. One pulse "
"can be equivalent to anywhere from 1 to 4 SDK \"counts\". Be careful when "
"reading datasheets!"
msgstr ""
"No existe una terminología estandarizada real cuando se trata de "
"codificadores de cuadratura. El SDK utiliza \"CPR\" o recuentos por "
"revolución, por defecto. También puede ver algunas hojas de datos lista "
"\"PPR\" o pulsos por revolución. Un pulso puede ser equivalente a entre 1 y "
"4 \"recuentos\" SDK. Tenga cuidado al leer las hojas de datos."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:85
msgid ""
"Encoders with high numbers of Counts per Revolution, such as the REV Through"
" Bore Encoder, can lose steps if plugged into ports 1 or 2. In addition, "
"calls to ``getVelocity()`` on a DcMotorEx object may overflow with high "
"counts per revolution encoders, due to the returned number only being a 16 "
"bit signed integer."
msgstr ""
"Los codificadores con altos números de conteos por revolución, como el  REV "
"Through Bore Encoder, pueden perder pasos si se conectan a los puertos 1 o "
"2. Además, las llamadas a ``getVelocity()`` en un objeto DcMotorEx pueden "
"desbordarse con codificadores de recuentos altos por revolución, debido a "
"que el número devuelto sólo es un entero con signo de 16 bits."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:88
msgid "Servo"
msgstr "Servo"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:94
msgid ""
"After instantiating a ``Servo``, there are two main functions that can be "
"called: ``setPosition()`` and ``getPosition()``. ::"
msgstr ""
"Después de instanciar un ``Servo``, hay dos funciones principales que se "
"pueden llamar: ``setPosition()`` y ``getPosition()``. ::"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:99
msgid ""
"``setPosition()`` sets the position of the :term:`servo <Servo>`. The SDK "
"will use a built-in control loop with the :term:`servo's <Servo>` "
"potentiometer to drive the :term:`servo <Servo>` to that position and hold "
"that position. ``setPosition()`` takes in a double between 0 and 1, where 0 "
"is the :term:`servo's <Servo>` lower limit of rotation and 1 is the "
":term:`servo's <Servo>` upper limit of rotation. Everything between is "
"directly proportional, so 0.5 is the middle, 0.75 is 3/4 the way up, etc."
msgstr ""
"``setPosition()`` establece la posición del :term:`servo <Servo>`. El SDK "
"utilizará un bucle de control integrado con el potenciómetro del "
":term:`servo <Servo>` para conducir el :term:`servo <Servo>` a esa posición "
"y mantener esa posición. ``setPosition()`` toma un doble entre 0 y 1, donde "
"el 0 del :term:`servo <Servo>` es el límite inferior de rotación y el 1 del "
":term:`servo <Servo>` es el límite superior de rotación. Todo lo que está "
"entre es directamente proporcional, por lo que 0.5 es el medio, 0.75 es 3/4 "
"del camino, etc."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:101
msgid ""
"``getPosition()`` does not return the :term:`servo's <Servo>` current "
"position, rather its current target position. If a variable for the "
":term:`servo's <Servo>` current target position is stored properly, this "
"function should never be needed."
msgstr ""
"``getPosition()`` no devuelve la posición actual del :term:`servo <Servo>`, "
"sino su posición actual de destino. Si una variable para la posición actual "
"del destino del :term:`servo<Servo>` se almacena correctamente, esta función"
" no debería ser necesaria."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:104
msgid "Continuous Rotation Servo"
msgstr "Servo de rotación continua"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:110
msgid ""
"A CRServo has one main method; ``setPower()``. This works very similarly to "
"``DcMotor`` 's ``setPower()``, meaning that passing it 0 makes it stop, "
"passing it 1 makes it go forward at full speed, passing it -1 makes it go "
"backwards at full speed, and everything in between. ::"
msgstr ""
"Un CRServo tiene un método principal; ``setPower()``. Esto funciona de "
"manera muy similar a ``DcMotor`` `` ``setPower()``, lo que significa que "
"pasándole 0 hace que se detenga, pasándole 1 hace que avance a toda "
"velocidad, pasándole -1 hace que retroceda a toda velocidad, y todo lo "
"demás. ::"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:115
msgid "Digital IO"
msgstr "IO digital"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:121
msgid ""
"A DigitalChannel has a couple main methods. ``setMode()`` is used to set the"
" port as either an OUTPUT or INPUT port, ``getState()`` returns the current "
"state of the port (only works in INPUT mode), and ``setState()`` sets the "
"state of the port (only works in OUTPUT mode)"
msgstr ""
"Un DigitalChannel tiene un par de métodos principales. ``setMode()`` se "
"utiliza para establecer el puerto como un puerto OUTPUT o INPUT, "
"``getState()`` devuelve el estado actual del puerto (sólo funciona en modo "
"INPUT), y ``setState()`` establece el estado del puerto (sólo funciona en "
"modo OUTPUT)."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:123
msgid "Digital ports start by default in INPUT mode"
msgstr "Los puertos digitales se inician por defecto en modo ENTRADA \"INPUT\""

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:125
msgid ""
"Digital ports are pulled UP to prevent floating. This means that there is a "
"resistor between the port and 3.3V so the port reads HIGH by default when "
"nothing is connected. As a result digital devices MUST connect the digital "
"pin to ground when closed, then leave it unconnected when open. For limit "
"switches, this means connecting one lead to ground and the other to the "
"digital port. **Connecting this wrong (connecting 3.3V to the digital port) "
"may cause instability and can cause your expansion hub to crash**"
msgstr ""
"Los puertos digitales se ponen hacia ARRIBA para evitar que floten. Esto "
"significa que hay una resistencia entre el puerto y 3.3V para que el puerto "
"se lea ALTO por defecto cuando no hay nada conectado. Como resultado, los "
"dispositivos digitales DEBEN conectar el pin digital a tierra cuando está "
"cerrado, y dejarlo desconectado cuando está abierto. Para los finales de "
"carrera, esto significa conectar un cable a tierra y el otro al puerto "
"digital. **Conectar esto incorrectamente (conectando 3.3V al puerto digital)"
" puede causar inestabilidad y puede hacer que tu expansion hub se bloquee**."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:128
msgid "Analog Input"
msgstr "Entrada analógica"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:134
msgid ""
"An ``AnalogInput`` has one main method: ``getVoltage()`` which is used to "
"get the current input voltage to the port."
msgstr ""
"Una ``AnalogInput`` \"Entrada analoga\" tiene un método principal: "
"``getVoltage()`` que se utiliza para obtener el voltaje de entrada actual al"
" puerto."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:136
msgid ""
"Although ``getMaxVoltage()`` returns 3.3v, the expansion and control hub "
"analog input ports can safely handle up to 5v."
msgstr ""
"Aunque ``getMaxVoltage()`` devuelve 3.3v, los puertos de entrada analógica "
"del control y expansion hub pueden manejar con seguridad hasta 5v."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:139
msgid "A Note on Hardware Call Speed"
msgstr "Nota sobre la velocidad de llamada del hardware"

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:141
msgid ""
"Every hardware call you make, (whether it be setting the power for a motor, "
"setting a :term:`servo <Servo>` position, reading an encoder value, etc.) "
"will take approximately 3 milliseconds to execute, except for I2C calls "
"which can take upwards of 7ms. This is because behind the scenes, the SDK "
"may need to make multiple hardware calls in order to perform the I2C "
"operation."
msgstr ""
"Cada llamada de hardware que realices, (ya sea ajustar la potencia de un "
"motor, ajustar una posición del :term:`servo <Servo>`, leer un valor de "
"encoder, etc.) tardará aproximadamente 3 milisegundos en ejecutarse, excepto"
" las llamadas I2C que pueden tardar más de 7ms. Esto se debe a que entre "
"bastidores, el SDK puede necesitar hacer múltiples llamadas al hardware para"
" realizar la operación I2C."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:143
msgid ""
"When using a Control Hub, you may see considerably faster hardware call "
"times because the Control Hub uses a direct UART connection to the Lynx "
"board instead of going through USB and a middle-man FTDI as happens when "
"using a phone."
msgstr ""
"Cuando se utiliza un Control Hub, puede ver tiempos de llamada de hardware "
"considerablemente más rápidos porque el Control Hub utiliza una conexión "
"UART directa a la placa Lynx en lugar de ir a través de USB y un "
"intermediario FTDI como sucede cuando se utiliza un teléfono."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:145
msgid ""
"These times may seem fast, but they add up quickly. Consider a control loop "
"to drive forward for N encoder counts while maintaining heading using the "
"IMU. This would require 5 normal hardware calls (4 set power + 1 read "
"encoder) and an I2C call (IMU) which means that the loop cycle would take "
"approximately 22ms to execute, and thus run at approximately 45Hz."
msgstr ""
"Estos tiempos pueden parecer rápidos, pero se acumulan rápidamente. "
"Considere un bucle de control para conducir hacia adelante para N recuentos "
"del codificador mientras se mantiene el rumbo utilizando la IMU. Esto "
"requeriría 5 llamadas normales de hardware (4 de ajuste de potencia + 1 de "
"lectura del codificador) y una llamada I2C (IMU), lo que significa que el "
"ciclo del bucle tardaría aproximadamente 22ms en ejecutarse, y por lo tanto "
"se ejecutaría a aproximadamente 45Hz."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:147
msgid ""
"This means that it is critical to minimize the amount of hardware calls you "
"make in order to keep your control loops running fast. For instance, do not "
"read a sensor more than once per loop. Instead, read it once and store the "
"value to a variable if you need to use it again at other points in the same "
"loop cycle."
msgstr ""
"Esto significa que es fundamental minimizar la cantidad de llamadas al "
"hardware para que los bucles de control funcionen con rapidez. Por ejemplo, "
"no lea un sensor más de una vez por bucle. En su lugar, léalo una vez y "
"almacene el valor en una variable por si necesita utilizarlo de nuevo en "
"otros puntos del mismo ciclo de bucle."

#: ../../gm0/source/docs/software/getting-started/common-hardware-components.rst:149
msgid ""
"Using a bulk read hardware call can help with this problem. A bulk read "
"takes the same 3ms to execute as any other normal hardware call, but it "
"returns far more data. In order to be able to use bulk reads, you must be "
"running SDK v5.4 or higher. See :doc:`/docs/software/tutorials/bulk-reads` "
"for more information"
msgstr ""
"El uso de una llamada de hardware de lectura masiva puede ayudar con este "
"problema. Una lectura masiva tarda los mismos 3 ms en ejecutarse que "
"cualquier otra llamada de hardware normal, pero devuelve muchos más datos. "
"Para poder utilizar las lecturas masivas, debe estar ejecutando SDK v5.4 o "
"superior. Consulte :doc:`/docs/tutoriales/software/lecturas-masivas` para "
"más información."
